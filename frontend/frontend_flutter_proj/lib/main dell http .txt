import 'dart:convert';
import 'package:quickalert/quickalert.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:uuid/uuid.dart';


void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
  
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController controllerSocket = TextEditingController();
  final TextEditingController controllerMessaggio = TextEditingController();
  final TextEditingController controllerRispostaServer =
      TextEditingController();

  final user = ['bfb6f760-bfdf-418f-8350-26031128e34e', 'Diego', 'Vagnini'];

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.

    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
          child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 250,
            height: 70,
            child: TextField(
              controller: controllerSocket,
              decoration: const InputDecoration(
                  border: OutlineInputBorder(), labelText: 'Socket del Server'),
            ),
          ),
          SizedBox(
            width: 250,
            height: 60,
            child: TextField(
              controller: controllerMessaggio,
              decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Testo da inviare al server'),
            ),
          ),
          ElevatedButton(onPressed: InvioJson, child: const Text('Invia Json')),
          SizedBox(
            width: 250,
            height: 60,
            child: TextField(
              controller: controllerRispostaServer,
              decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Risposta del server'),
              readOnly: true,
            ),
          ),
        ],
      )),
    );
  }

  void InvioJson() async {
    //continuare con l'invio del JSON sul server
    //_showAlertSuccess(controllerSocket.text);

    final Message = {
      'author': {
        'firstName': user[0],
        'lastName': user[1],
        'id': user[2],
      },
      'createdAt': DateTime.now().millisecondsSinceEpoch.toString(),
      'id': Uuid().v4(),
      'text': controllerMessaggio.text,
      'type': 'text',
      'timestamp': DateTime.now().toIso8601String(),
    };

    final response = await http.post(
        Uri.parse(
            "http://${controllerSocket.text}/submit"), // indirizzo del server da cambiare
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(Message));

    if (response.statusCode == 200) {
      final responseData = jsonDecode(response.body);
      final risposta = responseData['message'];
      //_showAlertSuccess(risposta);
      setState(() {
        controllerRispostaServer.text = risposta;
        controllerMessaggio.text = "";
        controllerSocket.text = '';
      });
    }
  }

  void _showAlertSuccess(String s) {
    QuickAlert.show(
        context: context,
        type: QuickAlertType.success,
        text: s,
        title: 'Successo');
  }

  void _showAlertError(String s) {
    QuickAlert.show(
        context: context, type: QuickAlertType.error, text: s, title: 'Errore');
  }
}
